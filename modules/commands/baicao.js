module.exports.config = {
    name: "baicao",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "",
    description: "Game 3 c√¢y d√†nh cho nh√≥m c√≥ ƒë·∫∑t c∆∞·ª£c (c√≥ ·∫£nh l√° b√†i)",
    commandCategory: "Tr√≤ Ch∆°i",
    usages: "[start/join/info/leave]",
    cooldowns: 1
};


const values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"];
const suits = ["spades", "hearts", "diamonds", "clubs"];
const deck = [];

for (let i = 0 ; i < values.length; i++) {
  for (let x = 0; x < suits.length; x++) {
    let weight = parseInt(values[i]);
    if (["J", "Q", "K"].includes(values[i])) weight = 10;
    else if (values[i] == "A") weight = 11;
    const card = {
      Value: values[i],
      Suit: suits[x],
      Weight: weight,
      Icon: suits[x] == "spades" ? "‚ô†Ô∏è" : suits[x] == "hearts" ? "‚ô•Ô∏è" : suits[x] == "diamonds" ? "‚ô¶Ô∏è" : "‚ô£Ô∏è"
        };
    deck.push(card);
  }
}

function createDeck() {
  // for 1000 turns
  // switch the values of two random cards
  const deckShuffel = [...deck];
  for (let i = 0; i < 1000; i++) {
    const location1 = Math.floor((Math.random() * deckShuffel.length));
    const location2 = Math.floor((Math.random() * deckShuffel.length));
    const tmp = deckShuffel[location1];
    deckShuffel[location1] = deckShuffel[location2];
    deckShuffel[location2] = tmp;
  }
  return deckShuffel;
}

function getLinkCard(Value, Suit) {
  return `https://raw.githubusercontent.com/ntkhang03/poker-cards/main/cards/${Value == "J" ? "jack" : Value == "Q" ? "queen" : Value == "K" ? "king" : Value == "A" ? "ace" : Value}_of_${Suit}.png`;
}

async function drawCard(cards) {
  // 500 x 726
  const Canvas = require("canvas");
    const canvas = Canvas.createCanvas(500*cards.length, 726);
  const ctx = canvas.getContext("2d");
  let x = 0;
  for (const card of cards) {
    const loadImgCard = await Canvas.loadImage(card);
    ctx.drawImage(loadImgCard, x, 0);
    x += 500;
  }
  return canvas.toBuffer();
}

module.exports.handleEvent = async ({ Currencies, event, api, Users }) => {
  const Canvas = require("canvas");
  const fs = require ("fs-extra");
  
    const { senderID, threadID, body, messageID } = event;
  
    if (typeof body == "undefined") return;
    if (!global.moduleData.baicao) global.moduleData.baicao = new Map();
    if (!global.moduleData.baicao.has(threadID)) return;
    var values = global.moduleData.baicao.get(threadID);
    if (values.start != 1) return;
  
    const deckShuffel = values.deckShuffel; // B·ªô b√†i

    if (body.indexOf("Chia b√†i") == 0 || body.indexOf("chia b√†i")   == 0) {
        if (values.chiabai == 1) return;
        for (const key in values.player) {
            const card1 = deckShuffel.shift();
            const card2 = deckShuffel.shift();
            const card3 = deckShuffel.shift();
            var tong = (card1.Weight + card2.Weight + card3.Weight);
            if (tong >= 20) tong -= 20;
            if (tong >= 10) tong -= 10;
            values.player[key].card1 = card1;
            values.player[key].card2 = card2;
            values.player[key].card3 = card3;
            values.player[key].tong = tong;
            
            const linkCards = [];
            
            for (let i = 1; i < 4; i++) {
              const Card = values.player[key]["card" + i];
              linkCards.push(getLinkCard(Card.Value, Card.Suit));
            }
            
            const pathSave = __dirname + `/cache/card${values.player[key].id}.png`;
            fs.writeFileSync(pathSave, await drawCard(linkCards));
            
            api.sendMessage({
              body: `ùêÅùêöÃÄùê¢ ùêúùêÆÃâùêö ùêõùêöÃ£ùêß üé≤: ${card1.Value}${card1.Icon} | ${card2.Value}${card2.Icon} | ${card3.Value}${card3.Icon} \n\nùêìùê®ÃÇÃâùêßùê† ùêõùêöÃÄùê¢ ùêúùêÆÃâùêö ùêõùêöÃ£ùêß: ${tong}`,
              attachment: fs.createReadStream(pathSave)
            }, values.player[key].id, (error, info) => {
                if (error) return api.sendMessage(`ùêäùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêûÃÇÃâ ùêúùê°ùê¢ùêö ùêõùêöÃÄùê¢ ùêúùê°ùê® ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêùùêÆÃÄùêßùê†: ${values.player[key].id}`, threadID);
                fs.unlinkSync(pathSave);
            });
                
        }
        values.chiabai = 1;
        global.moduleData.baicao.set(threadID, values);
        return api.sendMessage("üí¶ ùêÇùê°ùê¢ùêö ùêõùêöÃÄùê¢ ùê≠ùê°ùêöÃÄùêßùê° ùêúùê®ÃÇùêßùê† ! ùêìùêöÃÇÃÅùê≠ ùêúùêöÃâ ùê¶ùê®Ã£ùê¢ ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê®ÃÅ ùüê ùê•ùêÆÃõùê®ÃõÃ£ùê≠ ùê≠ùê°ùêöùê≤ ùêõùêöÃÄùê¢ ùêßùêûÃÇùêÆÃÅ ùê§ùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêöÃÇùê≤ÃÅ ùêõùêöÃÄùê¢ ùê°ùêöÃÉùê≤ ùê§ùê¢ùêûÃÇÃâùê¶ ùê≠ùê´ùêö ùê•ùêöÃ£ùê¢ ùê≠ùê¢ùêß ùêßùê°ùêöÃÜÃÅùêß ùêúùê°ùê®ÃõÃÄ üíå", threadID);
    }

    if (body.indexOf("ƒê·ªïi b√†i") == 0 || body.indexOf("ƒë·ªïi b√†i")   == 0) {
        if (values.chiabai != 1) return;
        var player = values.player.find(item => item.id == senderID);
        if (player.doibai == 0) return api.sendMessage("ùêÅùêöÃ£ùêß ùêØùêÆÃõÃÄùêö ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† ùê≠ùê®ùêöÃÄùêß ùêõùê®Ã£ÃÇ ùê•ùêÆÃõùê®ÃõÃ£ùê≠ ùê≠ùê°ùêöùê≤ ùêõùêöÃÄùê¢", threadID, messageID);
        if (player.ready == true) return api.sendMessage("ùêÅùêöÃ£ùêß ùêØùêÆÃõÃÄùêö ùê´ùêûùêöùêùùê≤, ùêõùêöÃ£ùêß ùê§ùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêûÃÇÃâ ùê≠ùê°ùêöùê≤ ùêõùêöÃÄùê¢ !", threadID, messageID);
        const card = ["card1","card2","card3"];
        player[card[(Math.floor(Math.random() * card.length))]] = deckShuffel.shift();
        player.tong = (player.card1.Weight + player.card2.Weight + player.card3.Weight);
        if (player.tong >= 20) player.tong -= 20;
        if (player.tong >= 10) player.tong -= 10;
        player.doibai -= 1;
        global.moduleData.baicao.set(values);
        
        const linkCards = [];
            
        for (let i = 1; i < 4; i++) {
          const Card = player["card" + i];
          linkCards.push(getLinkCard(Card.Value, Card.Suit));
        }
        
      const pathSave = __dirname + `/cache/card${player.id}.png`;
        fs.writeFileSync(pathSave, await drawCard(linkCards));
      
        return api.sendMessage({
          body: `üÉè ùêÅùêöÃÄùê¢ ùêúùêÆÃâùêö ùêõùêöÃ£ùêß ùê¨ùêöùêÆ ùê§ùê°ùê¢ ùêõùê®ùê≠ ùê≠ùê°ùêöùê≤: ${player.card1.Value}${player.card1.Icon} | ${player.card2.Value}${player.card2.Icon} | ${player.card3.Value}${player.card3.Icon}\n\n‚ö°Ô∏è ùêìùê®ÃÇÃâùêßùê† ùêõùêöÃÄùê¢ ùêúùêÆÃâùêö ùêõùêöÃ£ùêß: ${player.tong}`,
          attachment: fs.createReadStream(pathSave)
    }, player.id, (error, info) => {
            if (error) return api.sendMessage(`ùêäùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêûÃÇÃâ ùê≠ùê°ùêöùê≤ ùêõùêöÃÄùê¢ ùêúùê°ùê® ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêùùêÆÃÄùêßùê†: ${player.id}`, threadID);
            fs.unlinkSync(pathSave);
        });
    }

    if (body.indexOf("ready") == 0 || body.indexOf("Ready")   == 0) {
        if (values.chiabai != 1) return;
        var player = values.player.find(item => item.id == senderID);
        if (player.ready == true) return;
        const name = await Users.getNameUser(player.id);
        values.ready += 1;
        player.ready = true;
        if (values.player.length == values.ready) {
            const player = values.player;
            player.sort(function (a, b) { return b.tong - a.tong });

            var ranking = [], num = 1;

            for (const info of player) {
                const name = await Users.getNameUser(info.id);
                ranking.push(`${num++} ‚Ä¢ ${name} ùêØùê®ÃõÃÅùê¢ ${info.card1.Value}${info.card1.Icon} | ${info.card2.Value}${info.card2.Icon} | ${info.card3.Value}${info.card3.Icon} => ${info.tong} ùêßùêÆÃÅùê≠ üí∏\n`);
            }
            
            try {
                await Currencies.increaseMoney(player[0].id, values.rateBet * player.length);
            } catch (e) {};
            global.moduleData.baicao.delete(threadID);
            
            return api.sendMessage(`[‚ö°Ô∏è] ùêäùêûÃÇÃÅùê≠ ùê™ùêÆùêöÃâ:\n\n ${ranking.join("\n")}\n\nùêëùê¢ùêûÃÇùêßùê† ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢ ùê≠ùê®ùê© ùüè ùêßùê°ùêöÃ£ÃÇùêß ùêØùêûÃÇÃÄ ùê¨ùê®ÃÇÃÅ ùê≠ùê¢ùêûÃÇÃÄùêß ùê≠ùêÆÃõùê®Ãõùêßùê† ùêÆÃõÃÅùêßùê† ${values.rateBet * player.length} ùêïùêçùêÉ üíµ`, threadID);
        }
        else return api.sendMessage(`[üòª] ùêçùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢: ${name} ùêïùêÆÃõÃÄùêö ùê¨ùêöÃÜÃÉùêß ùê¨ùêöÃÄùêßùê† ùê•ùêöÃ£ÃÇùê≠ ùêõùêöÃÄùê¢, ùêúùê®ÃÄùêß ùê•ùêöÃ£ùê¢: ${values.player.length - values.ready} ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢ ùêúùê°ùêÆÃõùêö ùê•ùêöÃ£ÃÇùê≠ ùêõùêöÃÄùê¢`, event.threadID);
    }
    
    if (body.indexOf("nonready") == 0 || body.indexOf("Nonready")   == 0) {
        const data = values.player.filter(item => item.ready == false);
        var msg = [];

        for (const info of data) {
            const name = global.data.userName.get(info.id) || await Users.getNameUser(info.id);
            msg.push(name);
        }
        if (msg.length != 0) return api.sendMessage("[üòø] ùêçùê°ùêÆÃõÃÉùêßùê† ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢ ùêúùê°ùêÆÃõùêö ùê¨ùêöÃÜÃÉùêß ùê¨ùêöÃÄùêßùê† ùêõùêöùê® ùê†ùê®ÃÇÃÄùê¶: " + msg.join(", "), threadID);
        else return;
    }
}

module.exports.run = async ({ api, event, args, Currencies }) => {
    var { senderID, threadID, messageID } = event;
 const { readdirSync, readFileSync, writeFileSync, existsSync, copySync, createWriteStream, createReadStream, fs } = require("fs-extra");
  const request = require("request")
    threadID = String(threadID);
    senderID = String(senderID);
    if (!existsSync(__dirname + '/cache/3cay.png')) {
        request('https://i.imgur.com/ixYeOs8.jpg').pipe(createWriteStream(__dirname + '/cache/3cay.png'));
      }
    if (!global.moduleData.baicao) global.moduleData.baicao = new Map();
    var values = global.moduleData.baicao.get(threadID) || {};
  var data = await Currencies.getData(event.senderID);
  var money = data.money     
    if(!args[0]) {
var msg =  {body: `üÉè====[ ùêÅùêöÃÄùêß ùêÅùêöÃÄùê¢ ùêÇùêöÃÄùê® ]====üÉè\n\nùóñùóµùóÆÃÄùóº ùó∫ùòÇÃõÃÄùóªùó¥ ùóØùóÆÃ£ùóª ùòÅùóºÃõÃÅùó∂ ùòÉùóºÃõÃÅùó∂ ùòÄùóºÃÄùóªùó¥ ùóØùóÆÃ£ùó∞ ùó∞ùòÇÃâùóÆ ùòÅùóµùóÆÃÇÃÄùóª ùóØùóÆÃÄùó∂ ùóóùòÇùóØùóÆùó∂\nùó°ùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ùòÅùóµùóÆùó∫ ùó¥ùó∂ùóÆ ùóØùóÆÃ£ùóª ùó∞ùóÆÃÇÃÄùóª ùóªùóµùóÆÃ£ÃÇùóΩ ùó∞ùóÆÃÅùó∞ ùóπùó≤Ã£ÃÇùóªùóµ ùóªùóµùòÇÃõ ùòÄùóÆùòÇ:\n¬ª /ùóØùóÆùó∂ùó∞ùóÆùóº ùó∞ùóøùó≤ùóÆùòÅùó≤ [ S·ªë Ti·ªÅn C∆∞·ª£c ]\n¬ª /ùóØùóÆùó∂ùó∞ùóÆùóº ùòÄùòÅùóÆùóøùòÅ [ B·∫Øt ƒê·∫ßu B√†n 3 C√¢y ]\n¬ª /ùóØùóÆùó∂ùó∞ùóÆùóº ùó∂ùóªùó≥ùóº [ Xem Th√¥ng Tin B√†n B√†i C√†o ]\n¬ª /ùóØùóÆùó∂ùó∞ùóÆùóº ùó∑ùóºùó∂ùóª [ ƒê·ªÉ Ng∆∞·ªùi Ch∆°i V√†o Game]\n¬ª /ùóØùóÆùó∂ùó∞ùóÆùóº ùóπùó≤ùóÆùòÉùó≤ [ ƒê·ªÉ R·ªùi B√†n 3 C√¢y ]\n¬ª ùóñùóµùó∂ùóÆ ùóØùóÆÃÄùó∂ [ ƒê·ªÉ Chia B√†i Cho Ng∆∞·ªùi Ch∆°i Ch·ªâ C√≥ Ch·ªß B√†n M·ªõi Nh·∫≠p C√≥ Hi·ªáu L·ªánh ]\n¬ª ƒêùóºÃÇÃâùó∂ ùóïùóÆÃÄùó∂ [ ƒê·ªÉ ƒê·ªïi B√†i M·ªói Ng∆∞·ªùi Ch∆°i Ch·ªâ C√≥ 2 L∆∞·ª£t ƒê·ªïi B√†i T∆∞∆°ng ·ª®ng ]\n¬ª ùó•ùó≤ùóÆùó±ùòÜ [ S·∫µn S√†ng M·ªü B√†i ]\n¬ª ùó°ùóºùóªùóøùó≤ùóÆùó±ùòÜ [ Xem Nh·ªØng Ng∆∞·ªùi Ch∆∞a S·∫µn S√†ng ]`, attachment : [
      createReadStream(__dirname + "/cache/3cay.png")
    ]}
     return api.sendMessage(msg, threadID, messageID)    }
     switch (args[0]) {
        case "create":
        case "-c": {
            if (global.moduleData.baicao.has(threadID)) return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêßùê°ùê®ÃÅùê¶ ùêßùêöÃÄùê≤ ùêúùê®ÃÅ ùê¨ùê®ÃÄùêßùê† ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêØùêöÃÇÃÉùêß ùê¶ùê®ÃõÃâ", threadID, messageID);
            if (!args[1] || isNaN(args[1]) || parseInt(args[1]) <= 1) return api.sendMessage("‚ö°Ô∏è ùêåùêÆÃõÃÅùêú ùêúùêÆÃõùê®ÃõÃ£ùêú ùêúùêÆÃâùêö ùêõùêöÃ£ùêß ùê§ùê°ùê®ÃÇùêßùê† ùê©ùê°ùêöÃâùê¢ ùê•ùêöÃÄ ùê¶ùê®Ã£ÃÇùê≠ ùêúùê®ùêß ùê¨ùê®ÃÇÃÅ ùê°ùê®ùêöÃ£ÃÜùêú ùê¶ùêÆÃõÃÅùêú ùêúùêÆÃõùê®ÃõÃ£ùêú ùêúùêÆÃâùêö ùêõùêöÃ£ùêß ùêõùêûÃÅ ùê°ùê®Ãõùêß ùüè ùêïùêçùêÉ üíµ", threadID, messageID);
      if (money < args[1]) return api.sendMessage(`[‚ö°Ô∏è] ùêÅùêöÃ£ùêß ùê≠ùê°ùê¢ùêûÃÇÃÅùêÆ ùê≠ùê¢ùêûÃÇÃÄùêß ùê§ùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêûÃÇÃâ ùê§ùê°ùê®ÃõÃâùê¢ ùê≠ùêöÃ£ùê® ùêõùêöÃÄùêß ùêØùê®ÃõÃÅùê¢ ùê†ùê¢ùêöÃÅ: ${args[1]} ùêïùêçùêÉ üíµ`,event.threadID,event.messageID);
      await Currencies.decreaseMoney(event.senderID, Number(args[1]));
            global.moduleData.baicao.set(event.threadID, { "author": senderID, "start": 0, "chiabai": 0, "ready": 0, player: [ { "id": senderID, "card1": 0, "card2": 0, "card3": 0, "doibai": 2, "ready": false } ], rateBet: Number(args[1])});
            return api.sendMessage(`üé≤ ùêÅùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêØùê®ÃõÃÅùê¢ ùê†ùê¢ùêöÃÅ ${args[1]} ùêïùêçùêÉ ùêúùêÆÃâùêö ùêõùêöÃ£ùêß ùê≠ùêöÃ£ùê® ùê≠ùê°ùêöÃÄùêßùê° ùêúùê®ÃÇùêßùê† !, ùêßùêûÃÇÃÅùêÆ ùê¶ùêÆùê®ÃÇÃÅùêß ùê≠ùê°ùêöùê¶ ùê†ùê¢ùêö ùêõùêöÃ£ùêß ùê°ùêöÃÉùê≤ ùêßùê°ùêöÃ£ÃÇùê© /ùêõùêöùê¢ùêúùêöùê® ùê£ùê®ùê¢ùêß\n[‚ö°Ô∏è] ùêçùê†ùêÆÃõùê®ÃõÃÄùê¢ ùê≠ùêöÃ£ùê® ùê§ùê°ùê®ÃÇùêßùê† ùêúùêöÃÇÃÄùêß ùê£ùê®ùê¢ùêß`, event.threadID, event.messageID);
        }
        
        case "join":
        case "-j": {
            if (!values) return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêúùê°ùêÆÃõùêö ùêúùê®ÃÅ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêßùêöÃÄùê®, ùêõùêöÃ£ùêß ùêúùê®ÃÅ ùê≠ùê°ùêûÃÇÃâ ùê≠ùêöÃ£ùê® ùêõùêöÃÜÃÄùêßùê† ùêúùêöÃÅùêúùê° ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† /ùêõùêöùê¢ùêúùêöùê® ùêúùê´ùêûùêöùê≠ùêû", threadID, messageID);
            if (values.start == 1) return api.sendMessage("ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêØùêÆÃõÃÄùêö ùêØùêöÃÄùê® ùêúùê°ùê®Ãõùê¢ ùê´ùê®ÃÇÃÄùê¢ üôà", threadID, messageID);
            if (money < values.rateBet) return api.sendMessage(`ùêÅùêöÃ£ùêß ùêØùêöÃÇÃÉùêß ùêúùê®ÃÄùêß ùê≠ùê°ùê¢ùêûÃÇÃÅùêÆ ùê≠ùê¢ùêûÃÇÃÄùêß ùê§ùê°ùê¢ ùê≠ùê°ùêöùê¶ ùê†ùê¢ùêö ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêØùê®ÃõÃÅùê¢ ùê†ùê¢ùêöÃÅ üíµ: ${values.rateBet}$`,event.threadID,event.messageID)
            if (values.player.find(item => item.id == senderID)) return api.sendMessage("[üÉè] ùêÅùêöÃ£ùêß ùê≠ùê°ùêöùê¶ ùê†ùê¢ùêö ùê≠ùêÆÃõÃÄ ùê≠ùê´ùêÆÃõùê®ÃõÃÅùêú ùê´ùê®ÃÇÃÄùê¢ !", threadID, messageID);
            values.player.push({ "id": senderID, "card1": 0, "card2": 0, "card3": 0, "tong": 0, "doibai": 2, "ready": false });
            await Currencies.decreaseMoney(event.senderID, values.rateBet);
            global.moduleData.baicao.set(threadID, values);
            return api.sendMessage("ùêìùê°ùêöùê¶ ùê†ùê¢ùêö ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùê≠ùê°ùêöÃÄùêßùê° ùêúùê®ÃÇùêßùê†", threadID, messageID);
        }

        case "leave":
        case "-l": {
            if (typeof values.player == "undefined") return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêúùê°ùêÆÃõùêö ùêúùê®ÃÅ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêßùêöÃÄùê®, ùêõùêöÃ£ùêß ùêúùê®ÃÅ ùê≠ùê°ùêûÃÇÃâ ùê≠ùêöÃ£ùê® ùêõùêöÃÜÃÄùêßùê† ùêúùêöÃÅùêúùê° ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† /ùêõùêöùê¢ùêúùêöùê® ùêúùê´ùêûùêöùê≠ùêû", threadID, messageID);
            if (!values.player.some(item => item.id == senderID)) return api.sendMessage("‚ö°Ô∏è ùêÅùêöÃ£ùêß ùêúùê°ùêÆÃõùêö ùê≠ùê°ùêöùê¶ ùê†ùê¢ùêö ùêØùêöÃÄùê® ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùê≠ùê´ùê®ùêßùê† ùêßùê°ùê®ÃÅùê¶ ùêßùêöÃÄùê≤ !", threadID, messageID);
            if (values.start == 1) return api.sendMessage("‚ö°Ô∏è ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêúùê°ùê¢ùêö ùêõùêöÃÄùê¢ ùê¶ùêöÃÇÃÅùê≠ ùê´ùê®ÃÇÃÄùê¢ üòø", threadID, messageID);
            if (values.author == senderID) {
                global.moduleData.baicao.delete(threadID);
                api.sendMessage("ùêçùê°ùêöÃÄ ùêúùêöÃÅùê¢ ùêØùêÆÃõÃÄùêö ùê´ùê®ÃõÃÄùê¢ ùê§ùê°ùê®Ãâùê¢ ùêõùêöÃÄùêß, ùêúùêÆÃÄùêßùê† ùêßùê†ùê°ùê¢ÃÉùêö ùêØùê®ÃõÃÅùê¢ ùêØùê¢ùêûÃ£ÃÇùêú ùêõùêöÃÄùêß ùê¨ùêûÃÉ ùêõùê¢Ã£ ùê†ùê¢ùêöÃâùê¢ ùê≠ùêöÃÅùêß üÉè", threadID, messageID);
            }
            else {
                values.player.splice(values.player.findIndex(item => item.id === senderID), 1);
                api.sendMessage("ùêÅùêöÃ£ùêß ùêØùêÆÃõÃÄùêö ùê´ùê®ÃõÃÄùê¢ ùê§ùê°ùê®Ãâùê¢ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêßùêöÃÄùê≤ !", threadID, messageID);
                global.moduleData.baicao.set(threadID, values);
            }
            return;
        }

        case "start":
        case "-s": {
            if (!values) return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêúùê°ùêÆÃõùêö ùêúùê®ÃÅ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêßùêöÃÄùê®, ùêõùêöÃ£ùêß ùêúùê®ÃÅ ùê≠ùê°ùêûÃÇÃâ ùê≠ùêöÃ£ùê® ùêõùêöÃÜÃÄùêßùê† ùêúùêöÃÅùêúùê° ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† /ùêõùêöùê¢ùêúùêöùê® ùêúùê´ùêûùêöùê≠ùêû", threadID, messageID);
            if (values.author !== senderID) return api.sendMessage("[üÉè] ùêÅùêöÃ£ùêß ùê§ùê°ùê®ÃÇùêßùê† ùê©ùê°ùêöÃâùê¢ ùê•ùêöÃÄ ùêßùê°ùêöÃÄ ùêúùêöÃÅùê¢ ùê§ùê°ùê®ÃÇùêßùê† ùê≠ùê°ùêûÃÇÃâ ùêõùêöÃÜÃÅùê≠ ùê¨ùê≠ùêöùê´ùê≠", threadID, messageID);
            if (values.player.length <= 1) return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêõùêöÃÄùêß ùêúùêÆÃâùêö ùêõùêöÃ£ùêß ùê§ùê°ùê®ÃÇùêßùê† ùêúùê®ÃÅ ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢ ùêßùêöÃÄùê® ùê≠ùê°ùêöùê¶ ùê†ùê¢ùêö, ùêõùêöÃ£ùêß ùêúùê®ÃÅ ùê≠ùê°ùêûÃÇÃâ ùê¶ùê®ÃõÃÄùê¢ ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêöÃÇÃÅùê≤ ùê≠ùê°ùêöùê¶ ùê†ùê¢ùêö ùêõùêöÃÜÃÄùêßùê† ùêúùêöÃÅùêúùê° ùê≤ùêûÃÇùêÆ ùêúùêöÃÇÃÄùêÆ ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢ ùê§ùê°ùêöÃÅùêú ùêßùê°ùêöÃ£ÃÇùê© /ùêõùêöùê¢ùêúùêöùê® ùê£ùê®ùê¢ùêß", threadID, messageID);
            if (values.start == 1) return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêõùêöÃÄùêß ùê≠ùê´ùê®ùêßùê† ùê≠ùê°ùê®ÃõÃÄùê¢ ùê†ùê¢ùêöùêß ùêúùê°ùê¢ùêö ùêõùêöÃÄùê¢ ùêõùê®ÃõÃâùê¢ ùêßùê°ùêöÃÄ ùêúùêöÃÅùê¢", threadID, messageID);
            values.deckShuffel = createDeck(); // B·ªô b√†i
            values.start = 1;
            return api.sendMessage("‚ö°Ô∏è ùêÅùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêúùêÆÃâùêö ùêõùêöÃ£ùêß ùêØùêöÃÄùê® ùê¨ùê®ÃÄùêßùê†", threadID, messageID);
        }

        case "info":
        case "-i": {
            if (typeof values.player == "undefined") return api.sendMessage("[üÉè] ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêúùê°ùêÆÃõùêö ùêúùê®ÃÅ ùêõùêöÃÄùêß ùêõùêöÃÄùê¢ ùêúùêöÃÄùê® ùêßùêöÃÄùê®, ùêõùêöÃ£ùêß ùêúùê®ÃÅ ùê≠ùê°ùêûÃÇÃâ ùê≠ùêöÃ£ùê® ùêõùêöÃÜÃÄùêßùê† ùêúùêöÃÅùêúùê° ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† /ùêõùêöùê¢ùêúùêöùê® ùêúùê´ùêûùêöùê≠ùêû", threadID, messageID);
            return api.sendMessage(
                "üé∞== ùêÅùêöÃÄùêß ùêÅùêöÃÄùê¢ ùêÇùêöÃÄùê® ==üé∞" +
                "\n- ùêçùê°ùêöÃÄ ùêÇùêöÃÅùê¢: " + values.author +
                "\n- ùêìùê®ÃÇÃâùêßùê† ùê¨ùê®ÃÇÃÅ ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêúùê°ùê®Ãõùê¢: " + values.player.length + " ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢" +
                "\n- ùêåùêÆÃõÃÅùêú ùêúùêÆÃõùê®ÃõÃ£ùêú: " + values.rateBet + " ùêïùêçùêÉ"
            , threadID, messageID);
        }

        default: {
            return global.utils.throwError(this.config.name, threadID, messageID);
        }
    }
}