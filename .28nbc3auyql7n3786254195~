module.exports.config = {
  name: "luotdung",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Nam",
  description: "T√πy ch·ªânh l∆∞·ª£t d√πng Bot",
  usages: "add/del/set || ng∆∞·ªùi d√πng pay/mua",
  commandCategory: "Box",
  cooldowns: 5
};

const fs = require("fs");
const path = __dirname + '/../../includes/handle/usages.json';
module.exports.onLoad = () => {
  if (!fs.existsSync(path)) fs.writeFileSync(path, JSON.stringify({}));
}

module.exports.run = async ({ event, api, args, Users, permssion }) => {
  const { threadID, messageID, senderID } = event;
  var usages = JSON.parse(require("fs").readFileSync(__dirname + `/../../includes/handle/usages.json`));
if(event.type == "message_reply") { id = event.messageReply.senderID }
  else id = senderID;
  let name = await Users.getNameUser(id)
  var num = parseInt(args[1]);
  let ld = JSON.parse(fs.readFileSync(path));
  const nmdl = this.config.name
  const cre = this.config.credits
  const prefix = config.PREFIX
   if (args.length == 0) {
    return api.sendMessage(`---[ ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö ]---\n\n${prefix}ùóπùòÇùóºùòÅùó±ùòÇùóªùó¥ ùòÄùó≤ùòÅ + ùòÄùóºÃÇÃÅ => Thay ƒë·ªïi s·ªë l∆∞·ª£t d√πng Bot c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c ph·∫£n h·ªìi tin nh·∫Øn\n${prefix}ùóπùòÇùóºùòÅùó±ùòÇùóªùó¥ ùóÆùó±ùó± + ùòÄùóºÃÇÃÅ => Add l∆∞·ª£t d√πng Bot cho b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c ph·∫£n h·ªìi tin nh·∫Øn\n${prefix}ùóπùòÇùóºùòÅùó±ùòÇùóªùó¥ ùó±ùó≤ùóπ + ùòÄùóºÃÇÃÅ => X√≥a l∆∞·ª£t d√πng Bot c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi ƒë∆∞·ª£c ph·∫£n h·ªìi tin nh·∫Øn\n${prefix}ùóπùòÇùóºùòÅùó±ùòÇùóªùó¥ ùóΩùóÆùòÜ + ùòÄùóºÃÇÃÅ => Chuy·ªÉn l∆∞·ª£t d√πng Bot c·ªßa m√¨nh cho ng∆∞·ªùi ƒë∆∞·ª£c ph·∫£n h·ªìi tin nh·∫Øn\n${prefix}ùóπùòÇùóºùòÅùó±ùòÇùóªùó¥ ùó∫ùòÇùóÆ => Mua l∆∞·ª£t d√πng Bot`, threadID, messageID);
  }if("Nam"!=cre)return;
   if (args[0] == "set") {
    if (permssion < 3) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - C·∫ßn quy·ªÅn Admin Super tr·ªü l√™n ƒë·ªÉ th·ª±c hi·ªán", threadID, messageID);
                       }
    if (isNaN(args[1])) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - Ph·∫£i l√† con s·ªë", threadID, messageID);
    }
return api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - ƒê√£ thay ƒë·ªïi s·ªë l∆∞·ª£t d√πng Bot c·ªßa ${name} th√†nh ${num}`, threadID, async (error, info) => {
         ld[id] = { usages: num }
fs.writeFileSync(path, JSON.stringify(ld));
    }, messageID);
  }
  if (args[0] == "add") {
    if (permssion < 3) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - C·∫ßn quy·ªÅn Admin Premuim tr·ªü l√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh", threadID, messageID);
    }
    if (isNaN(args[1])) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - Ph·∫£i l√† con s·ªë", threadID, messageID);
    }
    else if (num < 0) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - S·ªë l∆∞·ª£t c·∫ßn c·ªông ph·∫£i l·ªõn h∆°n 0", threadID, messageID);
    }
return api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - ƒê√£ c·ªông th√™m ${num} l∆∞·ª£t d√πng Bot cho ${name}`, threadID, async (error, info) => {
         ld[id] = { usages: parseInt(usages[id].usages) + parseInt(num) }
fs.writeFileSync(path, JSON.stringify(ld));
                }, messageID);
  }
  if (args[0] == "del") {
    if (permssion < 2) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - C·∫ßn quy·ªÅn Ng∆∞·ªùi h·ªó tr·ª£ tr·ªü l√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh", threadID, messageID);
    }
    if (isNaN(args[1])) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - Ph·∫£i l√† con s·ªë", threadID, messageID);
    }
    else if (num < 0) {
      return api.sendMessage("ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - S·ªë l∆∞·ª£t c·∫ßn tr·ª´ ph·∫£i l·ªõn h∆°n 0", threadID, messageID);
    }
return api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - ƒê√£ tr·ª´ ${num} l∆∞·ª£t d√πng Bot c·ªßa ${name}`, threadID, async (error, info) => {
         ld[id] = { usages: parseInt(usages[id].usages) - parseInt(num) }
fs.writeFileSync(path, JSON.stringify(ld));
                }, messageID);
  }
  if (args[0] == "pay") {
    if (event.type == "message_reply") { id = event.messageReply.senderID }
    if (num > usages[senderID].usages || isNaN(args[1])) {
     return api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - S·ªë l∆∞·ª£t c·∫ßn chuy·ªÉn ph·∫£i l√† 1 con s·ªë v√† kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n ${usages[senderID].usages}`, threadID, messageID);
    }
    else if (senderID == id) {
      return api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - B·∫°n ph·∫£i ph·∫£n h·ªìi tin nh·∫Øn c·ªßa ng∆∞·ªùi c·∫ßn chuy·ªÉn`, threadID, messageID);
    }
    let name = await Users.getNameUser(id)
    ld[id] = { usages: parseInt(usages[id].usages) + parseInt(num) }
fs.writeFileSync(path, JSON.stringify(ld));
 api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - ƒê√£ chuy·ªÉn cho ${name} ${num} l∆∞·ª£t d√πng Bot`, threadID, async () => {
  ld[senderID] = { usages: parseInt(usages[senderID].usages) - parseInt(num) }
fs.writeFileSync(path, JSON.stringify(ld));
    }, messageID);
	}
  if (args[0] == "mua") {
  	return api.sendMessage(`ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - Ph·∫£n h·ªìi tin nh·∫Øn n√†y b·∫±ng s·ªë l∆∞·ª£t c·∫ßn mua ( 100 000$ = 100 l∆∞·ª£t ) `,threadID, (error, info) => {
        global.client.handleReply.push({
            name: nmdl,
            messageID: info.messageID,
            author: senderID,
            type: "a",
        })
    }, messageID);
  }
}


module.exports.handleReply = async function ({ event, api, Currencies, handleReply }) {
    if (handleReply.author != event.senderID) return;
    const { body, threadID, messageID, senderID } = event;
    const { type } = handleReply;
  var usages = JSON.parse(require("fs").readFileSync(__dirname + `/../../includes/handle/usages.json`));
    const userMoney = (await Currencies.getData(senderID)).money;
    const input = parseInt(body);
    const money = parseInt(body) * 1000;
    let ld = JSON.parse(fs.readFileSync(path));
  switch (type) {
        case "a": {
            switch (body) {
                case body: { // t√≠nh l√†m th√™m case mua b·∫±ng xp n·ªØa :D
                  if (input > userMoney || isNaN(body) || userMoney < money) {
     return api.sendMessage(
       `ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - B·∫°n kh√¥ng ƒë·ªß money ƒë·ªÉ giao d·ªãch ho·∫∑c s·ªë l∆∞·ª£t kh√¥ng ph·∫£i l√† con s·ªë`, threadID, messageID);
      }
                  else if (input <= 0) {
     return api.sendMessage(
       `ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - S·ªë l∆∞·ª£t c·∫ßn mua ph·∫£i l·ªõn h∆°n 0`, threadID, messageID);
      }
                 else { await Currencies.decreaseMoney(senderID, parseInt(money));
ld[senderID] = { usages: parseInt(usages[senderID].usages) + parseInt(input) }
fs.writeFileSync(path, JSON.stringify(ld));
                    return api.sendMessage(
                        `ùóüùó®Ãõùó¢ÃõÃ£ùóß ùóóùó®ÃÄùó°ùóö - Mua th√†nh c√¥ng ${(input.toLocaleString(`en-US`))} l∆∞·ª£t d√πng\n - ${(money.toLocaleString(`en-US`))} $`
                  , threadID, messageID);
                }}
            }
        }
  }
}